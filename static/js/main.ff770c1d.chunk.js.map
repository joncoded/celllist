{"version":3,"sources":["components/CellList/CellList.js","data/SampleData.js","App.js","index.js"],"names":["GetSortableData","items","defaultSortField","defaultSortOrder","useState","field","order","sortSetting","setSortSetting","useMemo","sortableItems","sort","a","b","Intl","Collator","compare","sortBy","CellList","props","config","getClassNamesFor","undefined","caption","href","dataSource","url","target","title","Object","getOwnPropertyNames","map","column","indexHeader","onClick","className","row","indexRow","indexColumn","cell","toLocaleString","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4KAkDMA,EAAkB,SAACC,EAAOC,EAAkBC,GAAsB,IAAD,EAE7BC,mBAAS,CAACC,MAAOH,EAAkBI,MAAQH,IAFd,mBAE7DI,EAF6D,KAEhDC,EAFgD,KA0CrE,MAAO,CAAEP,MAtCWQ,mBAAQ,WAE1B,IAAIC,EAAa,YAAOT,GAoBxB,OAlBoB,OAAhBM,GAEFG,EAAcC,MAAK,SAACC,EAAEC,GAEpB,OAAID,EAAEL,EAAYF,OAASQ,EAAEN,EAAYF,OACV,QAAtBE,EAAYD,OAAmB,EAAI,EAExCM,EAAEL,EAAYF,OAASQ,EAAEN,EAAYF,OACV,QAAtBE,EAAYD,MAAkB,GAAK,EAErC,KAMXI,EAAcC,KAAKG,KAAKC,WAAWC,SAE5BN,IAEN,CAACT,EAAOM,IAckBU,OAZd,SAAAZ,GAEb,IAAIC,EAAQ,MAERC,GAAeA,EAAYF,QAAUA,GAA+B,QAAtBE,EAAYD,QAC5DA,EAAQ,QAGVE,EAAe,CAACH,QAAOC,WAIYC,gBAIxBW,EA9FE,SAACC,GAAW,IAEnBC,EAAWD,EAAXC,OAFkB,EAGapB,EAAgBmB,EAAMlB,MAAOmB,EAAOlB,iBAAkBkB,EAAOjB,kBAA5FF,EAHkB,EAGlBA,MAAOgB,EAHW,EAGXA,OAAQV,EAHG,EAGHA,YACjBc,EAAmB,SAAAhB,GACvB,GAAKE,EAGL,OAAOA,EAAYF,QAAUA,EAAQE,EAAYD,WAAQgB,GAG3D,OACE,qCACE,6BAAKF,EAAOG,UACZ,8CAAgB,mBAAGC,KAAMJ,EAAOK,WAAWC,IAAKC,OAAO,SAAvC,SAAiDP,EAAOK,WAAWG,QAAnF,OAEA,kCACE,gDAAmBR,EAAOG,WAC1B,gCACE,6BACGM,OAAOC,oBAAoB7B,EAAM,IAAI8B,KAAI,SAACC,EAAQC,GACjD,OACE,6BACE,wBAAQC,QAAS,kBAAMjB,EAAOe,IAASG,UAAWd,EAAiBW,GAAnE,SAA6EA,KAD/E,qBAAuBC,WAO/B,gCACGhC,EAAM8B,KAAI,SAACK,EAAKC,GACf,OACA,6BACGR,OAAOC,oBAAoB7B,EAAM,IAAI8B,KAAI,SAACC,EAAQM,GAEjD,IAAMC,EAA8B,iBAAfH,EAAIJ,GAAuBI,EAAIJ,GAAQQ,iBAAmBJ,EAAIJ,GACnF,OAAQ,6BAAuCO,GAAvC,qBAAuBD,QAJnC,cAAgBD,gBClCtBjB,EAAS,CACb,QAAY,0CACZ,WAAe,CACb,MAAU,mDACV,IAAQ,kFAEV,iBAAqB,aACrB,iBAAqB,QAUjBnB,EAAQ,CACZ,CAAE,KAAS,SACT,QAAY,uCACZ,SAAa,UACb,WAAc,UAEhB,CAAE,KAAS,mBACT,QAAY,wFACZ,SAAa,YACb,WAAc,SAEhB,CAAE,KAAS,cACT,QAAY,qEACZ,SAAa,UACb,WAAc,SAEhB,CAAE,KAAS,gBACT,QAAY,2EACZ,SAAa,OACb,WAAc,SAEhB,CAAE,KAAS,QACT,QAAY,uCACZ,SAAa,QACb,WAAc,SAEhB,CAAE,KAAS,kBACT,QAAY,wFACZ,SAAa,QACb,WAAc,SAEhB,CAAE,KAAS,cACT,QAAY,yDACZ,SAAa,OACb,WAAc,SAEhB,CAAE,KAAS,SACT,QAAY,uCACZ,SAAa,QACb,WAAc,SAEhB,CAAE,KAAS,OACT,QAAY,2BACZ,SAAa,UACb,WAAc,SAEhB,CAAE,KAAS,gBACT,QAAY,6EACZ,SAAa,QACb,WAAc,UC9CHwC,MAbf,WAEE,OACE,sBAAKN,UAAU,MAAf,UAEE,iDAEA,cAAC,EAAD,CAAUf,OAAQA,EAAQnB,MAAOA,QCTvCyC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.ff770c1d.chunk.js","sourcesContent":["import {React, useMemo, useState} from 'react';\n\nconst CellList = (props) => {\n\n  const { config } = props;\n  const { items, sortBy, sortSetting } = GetSortableData(props.items, config.defaultSortField, config.defaultSortOrder);\n  const getClassNamesFor = field => {\n    if (!sortSetting) {\n      return;\n    }\n    return sortSetting.field === field ? sortSetting.order : undefined;\n  }\n\n  return (\n    <>      \n      <h2>{config.caption}</h2>\n      <p>Data source: <a href={config.dataSource.url} target=\"_blank\">{config.dataSource.title}</a> </p>\n\n      <table>\n        <caption>Table of {config.caption}</caption>\n        <thead>\n          <tr>\n            {Object.getOwnPropertyNames(items[0]).map((column, indexHeader) => {\n              return (\n                <th key={`columnHead-${indexHeader}`}>\n                  <button onClick={() => sortBy(column)} className={getClassNamesFor(column)}>{column}</button>                  \n                </th>\n              )\n            })}\n          </tr>\n        </thead>\n        <tbody>\n          {items.map((row, indexRow) => {\n            return (\n            <tr key={`row-${indexRow}`}>\n              {Object.getOwnPropertyNames(items[0]).map((column, indexColumn) => {\n                // only format if the field has numbers\n                const cell = (typeof row[column] == \"number\") ? row[column].toLocaleString() : row[column];\n                return (<td key={`columnBody-${indexColumn}`}>{cell}</td>)\n              })}\n            </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    </>\n  )\n\n}\n\nconst GetSortableData = (items, defaultSortField, defaultSortOrder) => {\n  \n  const [ sortSetting, setSortSetting ] = useState({field: defaultSortField, order : defaultSortOrder});\n\n  const sortedItems = useMemo(() => {\n\n    let sortableItems = [...items];\n    \n    if (sortSetting !== null) {            \n\n      sortableItems.sort((a,b) => {       \n\n        if (a[sortSetting.field] < b[sortSetting.field]) {\n          return sortSetting.order === 'asc' ? -1 : 1;\n        } \n        if (a[sortSetting.field] > b[sortSetting.field]) {\n          return sortSetting.order === 'asc' ? 1 : -1;        \n        }\n        return 0;\n\n      });          \n          \n    }\n\n    sortableItems.sort(Intl.Collator().compare);\n\n    return sortableItems;\n\n  }, [items, sortSetting]); \n\n  const sortBy = field => {\n    \n    let order = 'asc';    \n    \n    if (sortSetting && sortSetting.field === field && sortSetting.order === 'asc') {\n      order = 'desc';\n    }\n    \n    setSortSetting({field, order});\n\n  }\n\n  return { items: sortedItems, sortBy, sortSetting };\n  \n}\n\nexport default CellList;","const config = {\n  \"caption\" : \"Russia's largest cities and populations\", \n  \"dataSource\" : {\n    \"title\" : \"List of cities and towns in Russia by population\",\n    \"url\" : \"https://en.wikipedia.org/wiki/List_of_cities_and_towns_in_Russia_by_population\"\n  },\n  \"defaultSortField\" : \"Population\",\n  \"defaultSortOrder\" : \"desc\"\n}\n\n/* \nYou can name your columns whatever you want...\n...and have as many columns as you wish... \n...but not too many or it could look too overwhelming! :)\n...you could also use fetch and get the data from an API \n*/\n\nconst items = [\n  { 'City' : 'Moscow', \n    'Russian' : 'Москва',\n    'District' : 'Central',\n    'Population': 12480481 \n  }, \n  { 'City' : 'Saint Petersburg', \n    'Russian' : 'Санкт-Петербург',\n    'District' : 'Northwest',\n    'Population': 5398064 \n  },\n  { 'City' : 'Novosibirsk', \n    'Russian' : 'Новосибирск',\n    'District' : 'Siberia',\n    'Population': 1625631 \n  },\n  { 'City' : 'Yekaterinburg', \n    'Russian' : 'Екатеринбург',\n    'District' : 'Ural',\n    'Population': 1493749 \n  },\n  { 'City' : 'Kazan', \n    'Russian' : 'Казань',\n    'District' : 'Volga',\n    'Population': 1257391 \n  },\n  { 'City' : 'Nizhny Novgorod', \n    'Russian' : 'Нижний Новгород',\n    'District' : 'Volga',\n    'Population': 1252236 \n  },\n  { 'City' : 'Chelyabinsk', \n    'Russian' : 'Челябинск',\n    'District' : 'Ural',\n    'Population': 1196680 \n  },\n  { 'City' : 'Samara', \n    'Russian' : 'Самара',\n    'District' : 'Volga',\n    'Population': 1156659 \n  },\n  { 'City' : 'Omsk', \n    'Russian' : 'Омск',\n    'District' : 'Siberia',\n    'Population': 1154507 \n  },\n  { 'City' : 'Rostov-on-Don', \n    'Russian' : 'Ростов-на-Дону',\n    'District' : 'South',\n    'Population': 1137904 \n  }\n];\n\nexport { config, items };","import React from 'react';\nimport CellList from './components/CellList/CellList';\nimport './index.css';\n\n/* data source */\nimport { config, items } from './data/SampleData';\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      {/* place in a header component in the future */}\n      <h1>cellList (Demo)</h1>\n      {/* this is it */}\n      <CellList config={config} items={items} />\n    </div>\n  );\n\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}